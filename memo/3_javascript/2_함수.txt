▷ 함수
	코드의 재사용을 목적으로 여러 줄의 코드를 모아둔 블록문.
	※ 선언된 매개변수의 갯수를 맞게 전달할 필요가 없다. 넘치면 잘리고, 모자라면 undefined

▶ 함수를 정의하는 문법
	1) function 식별자 (){} // 함수명();
	2) const 변수명 = function(){}; // 변수명(); , 익명함수
	3) const 변수명 = function 식별자(){}; // 변수명(); , 네이밍함수
	4) const 변수명 = () => {}; // 변수명();, 화살표 함수 

▶ 스코프
	변수와 함수 등의 식별자가 접근 가능한 범위
	
	1) 함수 스코프 : 함수 내에서 선언한 변수는 외부에서 사용 불가.
		var, let, const 다 해당.

	2) 블록 스코프 : 블록 내에서 선언한 변수는 외부에서 사용 불가.
		let, const 만 해당, 추후에 나온 개념.

	※ let, const 는 정확하게는 같은 스코프 내에서 중복 선언이 불가능한 것!
	우선순위는 가까운 스코프가 더 높다!

▶ 콜백 함수
	함수를 값으로 취급하기 때문에 매개변수로 전달이 가능하다.
	콜백 함수를 통해 로직을 분리하고 재사용할 수 있으며
	코드를 모듈화하고 특정 함수의 실행을 다른 함수의 흐름에 의존시킬 수 있다.

	function test(매개변수1, 매개변수2, callback){
		if(callback){
			callback(매개변수1);
		}
		return 매개변수1 + 매개변수2;
	}

	- 비동기 제어(ajax) -> 서버를 다녀온 결과가 준비되면 콜백을 통해 그 결과를 처리할 수 있다.
	- 이벤트 처리 -> 사용자의 액션 또는 시스템 이벤트가 발생할 때마다 특정 로직을 실행할 수 있다.